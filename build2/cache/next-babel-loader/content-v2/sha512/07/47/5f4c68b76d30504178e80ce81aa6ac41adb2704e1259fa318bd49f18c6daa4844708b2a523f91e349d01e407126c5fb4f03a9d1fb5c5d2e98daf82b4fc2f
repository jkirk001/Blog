{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jonathankirkpatrick/Desktop/Hired/evronBlog/evronblog/pages/chron/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from \"../../Components/Layout/Layout\";\nimport styles from \"./chron.module.css\";\nimport { useEffect, useState } from \"react\";\nimport dbConnect from \"../../utils/db-connect\";\nimport Blog from \"../../Models/blogpost\";\nimport LinkCardRow from \"../../Components/UI/CardDisplay/LinkCardRow/LinkCardRow\";\nimport insertionSort from \"../../utils/insertionSort\";\nimport TrailCol from \"../../Components/UI/Animations/Trail-Col\";\n\nconst chron = props => {\n  const {\n    0: display,\n    1: setDisplay\n  } = useState();\n  const {\n    0: year,\n    1: setYear\n  } = useState();\n  const {\n    0: month,\n    1: setMonth\n  } = useState();\n  const {\n    0: open,\n    1: set\n  } = useState(true);\n  useEffect(() => {\n    //get isnertion sort to work correctly\n    const orderedArr = insertionSort(props.posts);\n    const filteredArray = orderedArr.filter((item, index) => {\n      return parseInt(item.date.year) === parseInt(year);\n    });\n\n    if (month) {\n      const filteredArrayMonth = filteredArray.filter((item, index) => {\n        return parseInt(item.date.month - 1) === parseInt(month);\n      });\n      setDisplay(filteredArrayMonth.reverse());\n      return;\n    } //setDisplay(filteredArray);\n\n\n    setDisplay(filteredArray.reverse());\n  }, [year, month]);\n\n  const yearHandler = e => {\n    if (month) {\n      setMonth();\n      setYear(e.target.id);\n    }\n\n    setYear(e.target.id);\n  };\n\n  const monthHandler = e => {\n    if (e.target.id === month) return;\n\n    if (e.target.id !== month) {\n      set(false);\n      setTimeout(() => {\n        setMonth(e.target.id);\n        set(true);\n      }, 700);\n    }\n  };\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"press a year\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 17\n  }, this);\n\n  if (display.length) {\n    content = display.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(LinkCardRow, {\n        data: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 14\n      }, this);\n    });\n  }\n\n  const monthSpelled = [\"Jan\", \"Feb\", \"March\", \"April\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n  let monthButton = monthSpelled.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: month === String(index) ? styles.monthButtonSelected : styles.monthButton,\n      id: index,\n      onClick: monthHandler,\n      children: item\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.dateSection,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.yearButtons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: year === \"2021\" ? styles.yearRadioSelected : styles.yearRadio,\n          type: \"radio\",\n          id: \"2021\",\n          onClick: yearHandler,\n          children: \"2021\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: year === \"2020\" ? styles.yearRadioSelected : styles.yearRadio,\n          id: \"2020\",\n          onClick: yearHandler,\n          children: \"2020\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.monthButtons,\n        children: year ? monthButton : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.contentContainer,\n      children: /*#__PURE__*/_jsxDEV(TrailCol, {\n        open: open,\n        onClick: () => set(state => !state),\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}; //!Need to find a way to manupulate date in server end\n\n\nexport async function getStaticProps() {\n  await dbConnect();\n  const posts = await Blog.find({});\n  const finalPosts = posts.map((item, index) => {\n    const date = item.author.date.toLocaleDateString().split(\"/\");\n    item = item.toObject();\n    const nearlyFinal = Object(_objectSpread(_objectSpread({}, item), {}, {\n      date: {\n        month: date[0],\n        day: date[1],\n        year: date[2]\n      }\n    }));\n    return nearlyFinal;\n  }); //stupid fix but it seems to be the one\n\n  const finalPostsFormatted = JSON.parse(JSON.stringify(finalPosts));\n  return {\n    props: {\n      posts: finalPostsFormatted\n    },\n    revalidate: 10\n  };\n}\nexport default chron;","map":{"version":3,"sources":["/Users/jonathankirkpatrick/Desktop/Hired/evronBlog/evronblog/pages/chron/index.js"],"names":["Layout","styles","useEffect","useState","dbConnect","Blog","LinkCardRow","insertionSort","TrailCol","chron","props","display","setDisplay","year","setYear","month","setMonth","open","set","orderedArr","posts","filteredArray","filter","item","index","parseInt","date","filteredArrayMonth","reverse","yearHandler","e","target","id","monthHandler","setTimeout","content","length","map","monthSpelled","monthButton","String","monthButtonSelected","dateSection","yearButtons","yearRadioSelected","yearRadio","monthButtons","contentContainer","state","getStaticProps","find","finalPosts","author","toLocaleDateString","split","toObject","nearlyFinal","Object","day","finalPostsFormatted","JSON","parse","stringify","revalidate"],"mappings":";;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,WAAP,MAAwB,yDAAxB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,QAAP,MAAqB,0CAArB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvB,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,EAAtC;AACA,QAAM;AAAA,OAACU,IAAD;AAAA,OAAOC;AAAP,MAAkBX,QAAQ,EAAhC;AACA,QAAM;AAAA,OAACY,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,EAAlC;AACA,QAAM;AAAA,OAACc,IAAD;AAAA,OAAOC;AAAP,MAAcf,QAAQ,CAAC,IAAD,CAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMiB,UAAU,GAAGZ,aAAa,CAACG,KAAK,CAACU,KAAP,CAAhC;AAEA,UAAMC,aAAa,GAAGF,UAAU,CAACG,MAAX,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvD,aAAOC,QAAQ,CAACF,IAAI,CAACG,IAAL,CAAUb,IAAX,CAAR,KAA6BY,QAAQ,CAACZ,IAAD,CAA5C;AACD,KAFqB,CAAtB;;AAIA,QAAIE,KAAJ,EAAW;AACT,YAAMY,kBAAkB,GAAGN,aAAa,CAACC,MAAd,CAAqB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC/D,eAAOC,QAAQ,CAACF,IAAI,CAACG,IAAL,CAAUX,KAAV,GAAkB,CAAnB,CAAR,KAAkCU,QAAQ,CAACV,KAAD,CAAjD;AACD,OAF0B,CAA3B;AAGAH,MAAAA,UAAU,CAACe,kBAAkB,CAACC,OAAnB,EAAD,CAAV;AACA;AACD,KAda,CAed;;;AACAhB,IAAAA,UAAU,CAACS,aAAa,CAACO,OAAd,EAAD,CAAV;AACD,GAjBQ,EAiBN,CAACf,IAAD,EAAOE,KAAP,CAjBM,CAAT;;AAmBA,QAAMc,WAAW,GAAIC,CAAD,IAAO;AACzB,QAAIf,KAAJ,EAAW;AACTC,MAAAA,QAAQ;AACRF,MAAAA,OAAO,CAACgB,CAAC,CAACC,MAAF,CAASC,EAAV,CAAP;AACD;;AACDlB,IAAAA,OAAO,CAACgB,CAAC,CAACC,MAAF,CAASC,EAAV,CAAP;AACD,GAND;;AAOA,QAAMC,YAAY,GAAIH,CAAD,IAAO;AAC1B,QAAIA,CAAC,CAACC,MAAF,CAASC,EAAT,KAAgBjB,KAApB,EAA2B;;AAC3B,QAAIe,CAAC,CAACC,MAAF,CAASC,EAAT,KAAgBjB,KAApB,EAA2B;AACzBG,MAAAA,GAAG,CAAC,KAAD,CAAH;AACAgB,MAAAA,UAAU,CAAC,MAAM;AACflB,QAAAA,QAAQ,CAACc,CAAC,CAACC,MAAF,CAASC,EAAV,CAAR;AACAd,QAAAA,GAAG,CAAC,IAAD,CAAH;AACD,OAHS,EAGP,GAHO,CAAV;AAID;AACF,GATD;;AAWA,MAAIiB,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;;AACA,MAAIxB,OAAO,CAACyB,MAAZ,EAAoB;AAClBD,IAAAA,OAAO,GAAGxB,OAAO,CAAC0B,GAAR,CAAY,CAACd,IAAD,EAAOC,KAAP,KAAiB;AACrC,0BAAO,QAAC,WAAD;AAAyB,QAAA,IAAI,EAAED;AAA/B,SAAkBC,KAAlB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFS,CAAV;AAGD;;AACD,QAAMc,YAAY,GAAG,CACnB,KADmB,EAEnB,KAFmB,EAGnB,OAHmB,EAInB,OAJmB,EAKnB,KALmB,EAMnB,MANmB,EAOnB,MAPmB,EAQnB,KARmB,EASnB,MATmB,EAUnB,KAVmB,EAWnB,KAXmB,EAYnB,KAZmB,CAArB;AAcA,MAAIC,WAAW,GAAGD,YAAY,CAACD,GAAb,CAAiB,CAACd,IAAD,EAAOC,KAAP,KAAiB;AAClD,wBACE;AACE,MAAA,SAAS,EACPT,KAAK,KAAKyB,MAAM,CAAChB,KAAD,CAAhB,GACIvB,MAAM,CAACwC,mBADX,GAEIxC,MAAM,CAACsC,WAJf;AAME,MAAA,EAAE,EAAEf,KANN;AAOE,MAAA,OAAO,EAAES,YAPX;AAAA,gBAUGV;AAVH,OAQOC,KARP;AAAA;AAAA;AAAA;AAAA,YADF;AAcD,GAfiB,CAAlB;AAgBA,sBACE,QAAC,MAAD;AAAA,4BACE;AAAS,MAAA,SAAS,EAAEvB,MAAM,CAACyC,WAA3B;AAAA,8BACE;AAAK,QAAA,SAAS,EAAEzC,MAAM,CAAC0C,WAAvB;AAAA,gCACE;AACE,UAAA,SAAS,EACP9B,IAAI,KAAK,MAAT,GAAkBZ,MAAM,CAAC2C,iBAAzB,GAA6C3C,MAAM,CAAC4C,SAFxD;AAIE,UAAA,IAAI,EAAC,OAJP;AAKE,UAAA,EAAE,EAAC,MALL;AAME,UAAA,OAAO,EAAEhB,WANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAYE;AACE,UAAA,SAAS,EACPhB,IAAI,KAAK,MAAT,GAAkBZ,MAAM,CAAC2C,iBAAzB,GAA6C3C,MAAM,CAAC4C,SAFxD;AAIE,UAAA,EAAE,EAAC,MAJL;AAKE,UAAA,OAAO,EAAEhB,WALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAuBE;AAAK,QAAA,SAAS,EAAE5B,MAAM,CAAC6C,YAAvB;AAAA,kBAAsCjC,IAAI,GAAG0B,WAAH,GAAiB;AAA3D;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eA0BE;AAAS,MAAA,SAAS,EAAEtC,MAAM,CAAC8C,gBAA3B;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAE9B,IAAhB;AAAsB,QAAA,OAAO,EAAE,MAAMC,GAAG,CAAE8B,KAAD,IAAW,CAACA,KAAb,CAAxC;AAAA,kBACGb;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD,CAjHD,C,CAmHA;;;AAEA,OAAO,eAAec,cAAf,GAAgC;AACrC,QAAM7C,SAAS,EAAf;AACA,QAAMgB,KAAK,GAAG,MAAMf,IAAI,CAAC6C,IAAL,CAAU,EAAV,CAApB;AACA,QAAMC,UAAU,GAAG/B,KAAK,CAACiB,GAAN,CAAU,CAACd,IAAD,EAAOC,KAAP,KAAiB;AAC5C,UAAME,IAAI,GAAGH,IAAI,CAAC6B,MAAL,CAAY1B,IAAZ,CAAiB2B,kBAAjB,GAAsCC,KAAtC,CAA4C,GAA5C,CAAb;AACA/B,IAAAA,IAAI,GAAGA,IAAI,CAACgC,QAAL,EAAP;AACA,UAAMC,WAAW,GAAGC,MAAM,iCACrBlC,IADqB;AAExBG,MAAAA,IAAI,EAAE;AACJX,QAAAA,KAAK,EAAEW,IAAI,CAAC,CAAD,CADP;AAEJgC,QAAAA,GAAG,EAAEhC,IAAI,CAAC,CAAD,CAFL;AAGJb,QAAAA,IAAI,EAAEa,IAAI,CAAC,CAAD;AAHN;AAFkB,OAA1B;AAQA,WAAO8B,WAAP;AACD,GAZkB,CAAnB,CAHqC,CAgBrC;;AACA,QAAMG,mBAAmB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeX,UAAf,CAAX,CAA5B;AACA,SAAO;AACLzC,IAAAA,KAAK,EAAE;AACLU,MAAAA,KAAK,EAAEuC;AADF,KADF;AAILI,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD;AAED,eAAetD,KAAf","sourcesContent":["import Layout from \"../../Components/Layout/Layout\";\nimport styles from \"./chron.module.css\";\nimport { useEffect, useState } from \"react\";\nimport dbConnect from \"../../utils/db-connect\";\nimport Blog from \"../../Models/blogpost\";\nimport LinkCardRow from \"../../Components/UI/CardDisplay/LinkCardRow/LinkCardRow\";\nimport insertionSort from \"../../utils/insertionSort\";\nimport TrailCol from \"../../Components/UI/Animations/Trail-Col\";\n\nconst chron = (props) => {\n  const [display, setDisplay] = useState();\n  const [year, setYear] = useState();\n  const [month, setMonth] = useState();\n  const [open, set] = useState(true);\n\n  useEffect(() => {\n    //get isnertion sort to work correctly\n    const orderedArr = insertionSort(props.posts);\n\n    const filteredArray = orderedArr.filter((item, index) => {\n      return parseInt(item.date.year) === parseInt(year);\n    });\n\n    if (month) {\n      const filteredArrayMonth = filteredArray.filter((item, index) => {\n        return parseInt(item.date.month - 1) === parseInt(month);\n      });\n      setDisplay(filteredArrayMonth.reverse());\n      return;\n    }\n    //setDisplay(filteredArray);\n    setDisplay(filteredArray.reverse());\n  }, [year, month]);\n\n  const yearHandler = (e) => {\n    if (month) {\n      setMonth();\n      setYear(e.target.id);\n    }\n    setYear(e.target.id);\n  };\n  const monthHandler = (e) => {\n    if (e.target.id === month) return;\n    if (e.target.id !== month) {\n      set(false);\n      setTimeout(() => {\n        setMonth(e.target.id);\n        set(true);\n      }, 700);\n    }\n  };\n\n  let content = <p>press a year</p>;\n  if (display.length) {\n    content = display.map((item, index) => {\n      return <LinkCardRow key={index} data={item} />;\n    });\n  }\n  const monthSpelled = [\n    \"Jan\",\n    \"Feb\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"Aug\",\n    \"Sept\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  let monthButton = monthSpelled.map((item, index) => {\n    return (\n      <button\n        className={\n          month === String(index)\n            ? styles.monthButtonSelected\n            : styles.monthButton\n        }\n        id={index}\n        onClick={monthHandler}\n        key={index}\n      >\n        {item}\n      </button>\n    );\n  });\n  return (\n    <Layout>\n      <section className={styles.dateSection}>\n        <div className={styles.yearButtons}>\n          <button\n            className={\n              year === \"2021\" ? styles.yearRadioSelected : styles.yearRadio\n            }\n            type=\"radio\"\n            id=\"2021\"\n            onClick={yearHandler}\n          >\n            2021\n          </button>\n\n          <button\n            className={\n              year === \"2020\" ? styles.yearRadioSelected : styles.yearRadio\n            }\n            id=\"2020\"\n            onClick={yearHandler}\n          >\n            2020\n          </button>\n        </div>\n        <div className={styles.monthButtons}>{year ? monthButton : null}</div>\n      </section>\n      <section className={styles.contentContainer}>\n        <TrailCol open={open} onClick={() => set((state) => !state)}>\n          {content}\n        </TrailCol>\n      </section>\n    </Layout>\n  );\n};\n\n//!Need to find a way to manupulate date in server end\n\nexport async function getStaticProps() {\n  await dbConnect();\n  const posts = await Blog.find({});\n  const finalPosts = posts.map((item, index) => {\n    const date = item.author.date.toLocaleDateString().split(\"/\");\n    item = item.toObject();\n    const nearlyFinal = Object({\n      ...item,\n      date: {\n        month: date[0],\n        day: date[1],\n        year: date[2],\n      },\n    });\n    return nearlyFinal;\n  });\n  //stupid fix but it seems to be the one\n  const finalPostsFormatted = JSON.parse(JSON.stringify(finalPosts));\n  return {\n    props: {\n      posts: finalPostsFormatted,\n    },\n    revalidate: 10,\n  };\n}\n\nexport default chron;\n"]},"metadata":{},"sourceType":"module"}
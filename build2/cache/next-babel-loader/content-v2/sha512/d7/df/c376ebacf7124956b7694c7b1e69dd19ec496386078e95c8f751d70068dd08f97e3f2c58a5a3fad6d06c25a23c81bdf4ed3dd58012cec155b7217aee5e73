{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from \"../../Components/Layout/Layout\";\nimport styles from \"./chron.module.css\";\nimport { useEffect, useState } from \"react\";\nimport dbConnect from \"../../utils/db-connect\";\nimport Blog from \"../../Models/blogpost\";\nimport LinkCardRow from \"../../Components/UI/LinkCard/LinkCardRow/LinkCardRow\";\nimport insertionSort from \"../../utils/insertionSort\";\n\nconst chron = props => {\n  const {\n    0: display,\n    1: setDisplay\n  } = useState();\n  const {\n    0: year,\n    1: setYear\n  } = useState();\n  const {\n    0: month,\n    1: setMonth\n  } = useState();\n  useEffect(() => {\n    //get isnertion sort to work correctly\n    const orderedArr = insertionSort(props.posts);\n    const filteredArray = orderedArr.filter((item, index) => {\n      return parseInt(item.date.year) === parseInt(year);\n    });\n\n    if (month) {\n      const filteredArrayMonth = filteredArray.filter((item, index) => {\n        return parseInt(item.date.month - 1) === parseInt(month);\n      });\n      setDisplay(filteredArrayMonth.reverse());\n      return;\n    } //setDisplay(filteredArray);\n\n\n    setDisplay(filteredArray.reverse());\n  }, [year, month]);\n\n  const yearHandler = e => {\n    if (month) {\n      setMonth();\n      setYear(e.target.id);\n    }\n\n    setYear(e.target.id);\n  };\n\n  const monthHandler = e => {\n    setMonth(e.target.id);\n  };\n\n  let content = /*#__PURE__*/_jsx(\"p\", {\n    children: \"press a year\"\n  });\n\n  if (display) {\n    content = display.map((item, index) => {\n      return /*#__PURE__*/_jsx(LinkCardRow, {\n        data: item\n      }, index);\n    });\n  }\n\n  const monthSpelled = [\"Jan\", \"Feb\", \"March\", \"April\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n  let monthButton = monthSpelled.map((item, index) => {\n    return /*#__PURE__*/_jsx(\"button\", {\n      className: month === String(index) ? styles.monthButtonSelected : styles.monthButton,\n      id: index,\n      onClick: monthHandler,\n      children: item\n    }, index);\n  });\n  return /*#__PURE__*/_jsxs(Layout, {\n    children: [/*#__PURE__*/_jsxs(\"section\", {\n      className: styles.dateSection,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.yearButtons,\n        children: [/*#__PURE__*/_jsx(\"button\", {\n          className: year === \"2021\" ? styles.yearRadioSelected : styles.yearRadio,\n          type: \"radio\",\n          id: \"2021\",\n          onClick: yearHandler,\n          children: \"2021\"\n        }), /*#__PURE__*/_jsx(\"button\", {\n          className: year === \"2020\" ? styles.yearRadioSelected : styles.yearRadio,\n          id: \"2020\",\n          onClick: yearHandler,\n          children: \"2020\"\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.monthButtons,\n        children: year ? monthButton : null\n      })]\n    }), /*#__PURE__*/_jsx(\"section\", {\n      className: styles.contentContainer,\n      children: content\n    })]\n  });\n}; //!Need to find a way to manupulate date in server end\n\n\nexport async function getStaticProps() {\n  await dbConnect();\n  const posts = await Blog.find({});\n  const finalPosts = posts.map((item, index) => {\n    const date = item.author.date.toLocaleDateString().split(\"/\");\n    item = item.toObject();\n    const nearlyFinal = Object(_objectSpread(_objectSpread({}, item), {}, {\n      date: {\n        month: date[0],\n        day: date[1],\n        year: date[2]\n      }\n    }));\n    return nearlyFinal;\n  }); //stupid fix but it seems to be the one\n\n  const finalPostsFormatted = JSON.parse(JSON.stringify(finalPosts));\n  return {\n    props: {\n      posts: finalPostsFormatted\n    },\n    revalidate: 10\n  };\n}\nexport default chron;","map":null,"metadata":{},"sourceType":"module"}